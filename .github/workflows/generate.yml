name: Main Workflow

permissions:
  actions: write
  contents: write
  statuses: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      dispatchId:
        type: string
      depth:
        type: number
        default: 1
      max-depth:
        type: number
        default: 1
      previous-file:
        type: string
        description: Previous test yaml file to use as a base

jobs:
  match-dispatchId:
    if: ${{ inputs.dispatchId }}
    runs-on: [ubuntu-latest]
    steps:
      - id: dispatch-id
        name: dispatchId:${{ inputs.dispatchId }}
        run: echo "💁 The dispatch ID is ${{ github.event.inputs.dispatchId }}"

  generate-exploratory:
    needs: match-dispatchId
    uses: ./.github/workflows/generate-exploratory.yml
    with:
      depth: ${{ fromJson(inputs.depth) }}
      max-depth: ${{ fromJson(inputs.max-depth) }}
      website-url: ${{ vars.TESTDRIVER_WEBSITE }}
      base-branch: ${{ github.ref_name }}
      previous-file: ${{ inputs.previous-file }}
    secrets:
      TESTDRIVER_API_KEY: ${{ secrets.TESTDRIVER_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      LOGIN_USERNAME: ${{ secrets.LOGIN_USERNAME }}
      LOGIN_PASSWORD: ${{ secrets.LOGIN_PASSWORD }}

  generate-regression:
    needs: generate-exploratory
    uses: ./.github/workflows/generate-regressions.yml
    with:
      depth: ${{ fromJson(inputs.depth) }}
      max-depth: ${{ fromJson(inputs.max-depth) }}
      website-url: ${{ vars.TESTDRIVER_WEBSITE }}
      base-branch: ${{ needs.generate-exploratory.outputs.pr-branch }}
    secrets:
      TESTDRIVER_API_KEY: ${{ secrets.TESTDRIVER_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  finalize:
    if: ${{inputs.depth != inputs.max-depth}}
    name: Finalize
    needs: generate-regression
    runs-on: ubuntu-latest
    steps:
      - id: create-dispatch-ids
        name: Create Dispatch IDs
        uses: actions/github-script@v6
        env:
          RESULTS: ${{ needs.generate-regression.outputs.results }}
          DEPTH: ${{ inputs.depth }}
          MAX_DEPTH: ${{ inputs.max-depth }}
        with:
          script: |
            const results = [];
            for (const item of JSON.parse(process.env.RESULTS)) {
              // Check if branch exists
              const branchExists = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: item.branch
              })
                .then(()=>true)
                .catch(()=>false)
              
              if(!branchExists) {
                console.log(`Branch ${item.branch} does not exist, skipping it`);
                continue              
              }
                
              item.depth = parseInt(process.env.DEPTH);
              item.maxDepth = parseInt(process.env.MAX_DEPTH);
              if(item.depth < item.maxDepth) {
                item.dispatchId = Math.random().toString(36).substring(2, 15);
              }
              results.push(item);
            }
            return JSON.stringify(results, null, 2);

      - id: trigger-next-workflows
        name: Trigger Next Workflows
        if: ${{ inputs.depth != inputs.max-depth }}
        uses: actions/github-script@v6
        env:
          RESULTS: ${{ steps.create-dispatch-ids.outputs.result }}
          TOKEN: ${{ secrets.GH_PAT_TOKEN || secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          result-encoding: string
          retries: 5
          retry-exempt-status-codes: 401,403
          script: |
            const dispatched = [];
            for (const item of JSON.parse(process.env.RESULTS)) {
              const success = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'generate.yml',
                ref: item.branch,
                inputs: {
                  dispatchId: item.dispatchId,
                  depth: `${item.depth + 1}`,
                  "max-depth": `${item.maxDepth}`,
                  "previous-file": item.filename,
                }
              })
                .then(() => true)
                .catch(() => false)

              if(!success){
                continue;
              }

              console.log(`Dispatched workflow for branch: ${item.branch}`);
              dispatched.push(item);
            }
            return JSON.stringify(dispatched, null, 2);

      - id: save-results
        uses: actions/github-script@v6
        env:
          RESULTS: ${{ steps.trigger-next-workflows.outputs.result || steps.create-dispatch-ids.outputs.result }}
        with:
          script: |
            fs.writeFileSync('results.json', process.env.RESULTS);

      - id: upload-results
        name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: results.json
          path: results.json
